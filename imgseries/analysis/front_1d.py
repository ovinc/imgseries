"""Analysis of wetting / drying fronts."""

# Non-standard modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Local imports
from .analysis_base import Analysis
from .formatters import PandasFormatter
from .results import PandasTsvJsonResults
from ..viewers import AnalysisViewer


class Front1DViewer(AnalysisViewer):

    def _create_figure(self):
        self.fig = plt.figure(figsize=(5, 7))
        xmin = 0.05
        xmax = 0.95
        w = xmax - xmin
        self.ax_img = self.fig.add_axes([xmin, 0.33, w, 0.65])
        self.ax_analysis = self.fig.add_axes([xmin, 0.09, w, 0.25])
        self.axs = self.ax_img, self.ax_analysis
        self.ax_img.axis('off')

    def _first_plot(self, data):
        """What to do the first time data arrives on the plot."""
        self.ax_img.set_title(f"img #{data['num']}")
        self.imshow = self.analysis.img_series._imshow(
            data['image'],
            ax=self.ax_img,
            **self.kwargs,
        )

        if data['analysis'] is None:  # e.g. start num not analyzed
            ny, nx = data['image'].shape
            self.analysis_line, = self.ax_analysis.plot(np.zeros(nx))
            self.analysis_line.set_visible(False)
            return

        self.analysis_line, = self.ax_analysis.plot(data['analysis'])
        self.updated_artists = [self.analysis_line, self.imshow]

    def _update_plot(self, data):
        """What to do upon iterations of the plot after the first time."""
        self.ax_img.set_title(f"img #{data['num']}")
        self.imshow.set_array(data['image'])

        if data['analysis'] is None:  # e.g. start num not analyzed
            self.analysis_line.set_visible(False)
            return

        self.analysis_line.set_visible(True)
        self.analysis_line.set_ydata(data['analysis'])
        self._autoscale(ax=self.ax_analysis)


class Front1DFormatter_Pandas(PandasFormatter):

    def _prepare_data_storage(self):
        """Prepare structure(s) that will hold the analyzed data."""
        # Dataframe creation is made later because one does not know initially
        # how many columns there will be.
        self.dataframe_created = False

    def _create_dataframe(self, data):

        self.data = pd.DataFrame(columns=range(data['analysis'].size))
        self.data.index.name = 'num'
        self.dataframe_created = True

    def _store_data(self, data):
        """How to store data generated by analysis on a single image."""
        if not self.dataframe_created:
            self._create_dataframe(data)
        self.data.loc[data['num']] = data['analysis']

    def _to_pandas(self):
        """How to convert data generated by _store_data() into a pandas table."""
        return self.data.sort_index()

    def _regenerate_data(self, num):
        """How to go back to raw dict of data from self.data."""
        try:  # This is because the df indexes vary whether from load_csv or not
            data = self.analysis.results.data.loc[num, 0:]
        except KeyError:  # this num has not been analyzed yet
            data = None
        return {'analysis': data}


class Front1DResults_PandasTsv(PandasTsvJsonResults):

    measurement_type = 'front1d'
    default_filename = 'Img_Front1D'

    @staticmethod
    def _integrify_columns(name):
        try:
            return int(name)
        except ValueError:
            return name

    def _load_data(self, filepath):
        """load_csv returns the indices as str, but we need to convert the
        x positions as intergers"""
        data = super()._load_data(filepath)
        return data.rename(columns=self._integrify_columns)


# =========================== Main ANALYSIS class ============================


class Front1D(Analysis):
    """Class to perform analysis of average grey level on image series."""

    measurement_type = 'front1d'

    DefaultViewer = Front1DViewer
    DefaultFormatter = Front1DFormatter_Pandas
    DefaultResults = Front1DResults_PandasTsv

    def __init__(
        self,
        img_series,
        savepath=None,
        Viewer=None,
        Formatter=None,
        Results=None,
    ):
        """Analysis of avg gray level on selected zone in series of images.

        Parameters
        ----------
        img_series : ImgSeries or ImgStack object
            image series on which the analysis will be run

        savepath : str or Path object
            folder in which to save analysis data & metadata
                    (if not specified, the img_series savepath is used)

        Viewer : class
            (subclass of AnalysisViewer)
            Viewer class/subclasses that is used to display and inspect
            analysis data (is used by ViewerTools)

        Formatter: class
            (subclass of Formatter)
            class used to format results spit out by the raw analysis into
            something storable/saveable by the Results class.

        Results : class
            (subclass of Results)
            Results class/subclasses that is used to store, save and load
            analysis data and metadata.
        """
        super().__init__(
            img_series=img_series,
            savepath=savepath,
            Viewer=Viewer,
            Formatter=Formatter,
            Results=Results,
        )

    def _analyze(self, img):
        """Basic analysis function, to be threaded or multiprocessed.

        Parameters
        ----------
        img : array_like
            image array to be analyzed (e.g. numpy array).

        Returns
        -------
        dict
            dict of data, handled by self.formatter._store_data()
        """
        front_data = img.mean(axis=0)
        data = {'analysis': front_data}
        return data
