"""Analysis of wetting / drying fronts."""

# Non-standard modules
import numpy as np
import matplotlib.pyplot as plt

# Local imports
from .analysis_base import Analysis, PandasTsvResults, PandasFormatter
from ..viewers import AnalysisViewer


class Front1DViewer(AnalysisViewer):

    def _create_figure(self, num=0):
        self.fig, (self.ax_img, self.ax_analysis) = plt.subplots(2, 1)
        self.axs = self.ax_img, self.ax_analysis

    def _first_plot(self, data):
        """What to do the first time data arrives on the plot."""
        img = data['image']
        num = data['num']
        ana = data['analysis']

        self.ax_img.set_title(f'img #{num}')
        self.imshow = self.ax_img.imshow(img, cmap='gray', vmin=-1, vmax=1)
        self.ax_img.axis('off')

        self.analysis_line, = self.ax_analysis.plot(ana)

        self.fig.tight_layout()

        self.updated_artists = [self.analysis_line, self.imshow]

    def _update_plot(self, data):
        """What to do upon iterations of the plot after the first time."""
        img = data['image']
        num = data['num']
        ana = data['analysis']

        self.ax_img.set_title(f'img #{num}')
        self.imshow.set_array(img)
        self.analysis_line.set_data((range(len(ana)), ana))


class Front1DFormatter_Pandas(PandasFormatter):

    def _prepare_data_storage(self):
        """Prepare structure(s) that will hold the analyzed data."""
        pass

    def _store_data(self, data):
        """How to store data generated by analysis on a single image.

        Define in subclasses."""
        pass

    def _generate_pandas_data(self):
        """How to convert data generated by _store_data() into a pandas table."""
        pass



class Front1D(Analysis):
    """Class to perform analysis of average grey level on image series."""

    measurement_type = 'front1d'

    def __init__(self, img_series=None, savepath=None):
        """Analysis of avg gray level on selected zone in series of images.

        Parameters
        ----------
        - img_series: image series from the ImgSeries class or subclasses

        - savepath: folder in which to save analysis data & metadata
                    (if not specified, the img_series savepath is used)
        """
        super().__init__(img_series=img_series,
                         Viewer=Front1DViewer,
                         savepath=savepath)

        # By default, calculate differences with respect to the first image
        # in the sequence. Can be a list or range of images.
        self.reference_images = 0,

    def _create_reference(self):
        """Average all images taken as reference from self.reference_images."""
        imgs = []
        for num in self.reference_images:
            imgs.append(self.img_series.read(num=num))
        img_stack = np.stack(imgs)
        img_ref = img_stack.mean(axis=0)
        return img_ref

    def _analyze(self, num, live=False):
        """Basic analysis function, to be threaded or multiprocessed.

        Parameters
        ----------
        - num: file number identifier across the image file series
        - live: if True, analysis results are displayed in real time

        Output
        ------
        - data, handled by self._store_data()
        """
        img_diff = (self.img_series.read(num=num) - self.img_ref) / self.img_ref
        front_data = img_diff.mean(axis=1)
        data = {'analysis': front_data, 'num': num}
        if live:
            data['image'] = img_diff
        return data

    def _initialize(self):
        """Check everything OK before starting analysis & initialize params."""
        self.img_ref = self._create_reference()

    def _add_metadata(self):
        """Add useful analysis parameters etc. to the self.metadata dict.

        (later saved in the metadata json file)
        Define in subclasses
        """
        self.metadata['reference images'] = self.reference_images
