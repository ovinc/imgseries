"""Contour tracking on image series."""

# Misc. package imports
from skimage import measure
from numpy import nan as NaN
import matplotlib.pyplot as plt
import imgbasics

# Local imports
from .analysis_base import Analysis
from .formatters import PandasFormatter
from .results import PandasTsvJsonResults
from ..process import rgb_to_grey
from ..fileio import FileIO
from ..parameters.analysis import Contours, Threshold
from ..viewers import AnalysisViewer


# ============================ Results formatting ============================


class ContourTrackingFormatter(PandasFormatter):
    """Formatting of results spit out by analysis methods"""

    @property
    def n_contours(self):
        return len(self.analysis.contours.data['position'])

    @property
    def results_have_raw_contours(self):
        try:
            self.analysis.results.raw_contour_data
        except AttributeError:
            return False
        else:
            return True

    # ----------------- Methods required by PandasFormatter ------------------

    def _column_names(self):
        """Prepare structure(s) that will hold the analyzed data."""
        names = 'x', 'y', 'p', 'a'  # measurement names (p, a perimeter, area)
        return [
            name + str(k + 1)
            for k in range(self.n_contours)
            for name in names
        ]

    def _data_to_results_row(self, data):
        """Generate iterable of data that fits in the defined columns."""
        return sum(data['contour properties'], start=())  # "Flatten" list of tuples

    def _results_row_to_data(self, row):
        """Go from row of data to raw data"""
        data = {'contour properties': []}

        for k in range(self.n_contours):
            lim1 = 'x' + str(k + 1)  # contour positions and perimeters
            lim2 = 'a' + str(k + 1)
            xc, yc, perimeter, area = row.loc[lim1:lim2]
            data['contour properties'].append((xc, yc, perimeter, area))

        return data

    def _to_metadata(self):
        """Get analysis metadata excluding paths and transforms"""
        return {'contours': self.analysis.contours.data}

    # -------- Redefinition of Formatter methods to add raw contours ---------

    def _prepare_data_storage(self):
        """Prepare structure(s) that will hold the analyzed data."""
        super()._prepare_data_storage()
        if self.analysis.save_raw_contours:
            self._prepare_raw_contours_storage()

    def _store_data(self, data):
        """How to store data generated by analysis on a single image."""
        super()._store_data(data)
        if self.analysis.save_raw_contours:
            self._store_raw_contours(data)

    def _to_results_data(self):
        if self.analysis.save_raw_contours:
            self._to_results_raw_contours()
        return super()._to_results_data()

    def _regenerate_analysis_data(self, num):
        """How to go back to raw dict of data from self.data.

        Useful for plotting / animating results again after analysis, among
        other things.
        """
        data = super()._regenerate_analysis_data(num=num)
        if not self.results_have_raw_contours:
            return data
        return {**data, **self._regenerate_raw_contours_from_results(num)}

    # ----------------- Methods used above for raw contours ------------------

    def _prepare_raw_contours_storage(self):
        """Addition to _prepare_data_storage()"""
        self._raw_contour_data = {str(k + 1): {} for k in range(self.n_contours)}

    def _store_raw_contours(self, data):
        """Addition to _store_data()"""
        num = data['num']
        for k in range(self.n_contours):
            contour = data['raw contours'][k]
            if contour is not None:
                x, y = contour
                coords = {'x': list(x), 'y': list(y)}
            else:
                coords = None
            # The str is because JSON converts to str, and so this makes
            # live data compatible with reloaded data from JSON
            self._raw_contour_data[str(k + 1)][str(num)] = coords

    def _to_results_raw_contours(self):
        """Addition to _to_results_data()"""
        self.analysis.results.raw_contour_data = self._raw_contour_data

    def _regenerate_raw_contours_from_results(self, num):
        """Addition to _regenerate_analysis_data()"""
        raw_contour_data = self.analysis.results.raw_contour_data

        try:
            raw_contour_data['1'][str(num)]
        except KeyError:  # this particular num not analyzed
            return {}

        data = {'raw contours': []}

        for k in range(self.n_contours):
            contour_data = raw_contour_data[str(k + 1)][str(num)]
            if contour_data is not None:
                contour = (contour_data['x'], contour_data['y'])
            else:
                contour = None
            data['raw contours'].append(contour)
        return data


class ContourTrackingResults(PandasTsvJsonResults):

    default_filename = 'Img_ContourTracking'

    def _save_raw_contour_data(self, filename=None):
        name = self._set_filename(filename)
        raw_data_filename = name + '_RawContourData.json'
        filepath = self.savepath / raw_data_filename
        FileIO.to_json(self.raw_contour_data, filepath)

    def _load_raw_contour_data(self, filename=None):
        fname = self._set_filename(filename)
        raw_data_filename = fname + '_RawContourData.json'
        filepath = self.savepath / raw_data_filename
        return FileIO.from_json(filepath=filepath)

    def load(self, filename=None):
        """Load data and metadata from tsv/json files."""
        super().load(filename=filename)
        try:
            self.raw_contour_data = self._load_raw_contour_data(
                filename=filename,
            )
        except FileNotFoundError:
            pass

    def save(self, filename=None):
        """Save data and metadata into tsv/json files."""
        super().save(filename=filename)
        try:
            self.raw_contour_data
        except AttributeError:
            pass
        else:
            self._save_raw_contour_data(filename=filename)


# ======================= Plotting / Animation classes =======================


class ContourTrackingViewer(AnalysisViewer):

    @property
    def n_contours(self):
        return len(self.analysis.contours.data['position'])

    def _contains_contour_properties(self, data):
        try:
            data['contour properties']
        except KeyError:
            return False
        else:
            return True

    def _contains_raw_contours(self, data):
        try:
            data['raw contours']
        except KeyError:
            return False
        else:
            return True

    def _plot_contours_centroids(self, data):
        self.centroid_pts = []
        for _ in range(self.n_contours):
            centroid_pt, = self.ax_img.plot([], [], '+b')
            self.centroid_pts.append(centroid_pt)
        self._update_contours_centroids(data)

    def _plot_raw_contours(self, data):
        self.contour_lines = []
        for _ in range(self.n_contours):
            contour_line, = self.ax_img.plot([], [], '-r')
            self.contour_lines.append(contour_line)
        self._update_raw_contours(data)

    def _update_contours_centroids(self, data):
        if not self._contains_contour_properties(data):
            for pt in self.centroid_pts:
                pt.set_visible(False)
            return

        for analysis, pt in zip(data['contour properties'], self.centroid_pts):
            pt.set_visible(True)
            pt.set_data(*analysis[:2])

    def _update_raw_contours(self, data):
        if not self._contains_raw_contours(data):
            for line in self.contour_lines:
                line.set_visible(False)
            return

        for contour, line in zip(data['raw contours'], self.contour_lines):
            if contour is not None:
                line.set_visible(True)
                line.set_data(*contour)
            else:
                line.set_visible(False)

    # ---------------- Methods subclassed from AnalysisViewer ----------------

    def _create_figure(self):
        self.fig, self.ax_img = plt.subplots()
        self.ax_img.axis('off')
        self.axs = self.ax_img,

    def _first_plot(self, data):
        """What to do the first time data arrives on the plot."""
        self._create_image(data)
        self.fig.tight_layout()

        self._plot_contours_centroids(data)
        self._plot_raw_contours(data)

        self.updated_artists = self.centroid_pts + self.contour_lines + [self.imshow]

    def _update_plot(self, data):
        """What to do upon iterations of the plot after the first time."""
        self._update_image(data)
        self._update_contours_centroids(data)
        self._update_raw_contours(data)


# =========================== Main ANALYSIS class ============================


class ContourTracking(Analysis):
    """Class to track contours on image series.

    Class attributes
    ----------------
    Viewer : class
        (subclass of AnalysisViewer)
        Viewer class/subclasses that is used to display and inspect
        analysis data (is used by ViewerTools)

    Formatter: class
        (subclass of Formatter)
        class used to format results spit out by the raw analysis into
        something storable/saveable by the Results class.

    Results : class
        (subclass of Results)
        Results class/subclasses that is used to store, save and load
        analysis data and metadata.
    """
    Viewer = ContourTrackingViewer
    Formatter = ContourTrackingFormatter
    Results = ContourTrackingResults

    # If results are independent (results from one num do not depend from
    # analysis on other nums), one do not need to re-do the analysis when
    # asking for the same num twice, and parallel computing is possible
    independent_results = False

    def __init__(
        self,
        img_series,
        savepath=None,
        save_raw_contours=True,
    ):
        """Analysis of iso-grey-level contours and their evolution in series.

        Parameters
        ----------
        img_series : ImgSeries or ImgStack object
            image series on which the analysis will be run

        savepath : str or Path object
            folder in which to save analysis data & metadata
                    (if not specified, the img_series savepath is used)

        save_raw_contours : bool
            if True (default), all coordinates of contour lines are saved in
            addition to contour positions, centroids and areas.
        """
        super().__init__(img_series=img_series, savepath=savepath)
        self.save_raw_contours = save_raw_contours

        # empty contour param object, needs to be filled with contours.define()
        # or contours.load() prior to starting analysis with self.run()
        self.contours = Contours(self)
        self.threshold = Threshold(self)

    def _find_contours(self, img, level):
        """Define how contours are found on an image."""
        if img.ndim == 2:
            image = img
        else:
            image = rgb_to_grey(img)
        return measure.find_contours(image, level)

    def _update_reference_positions(self, data):
        """Next iteration will look for contours close to the current ones."""
        for i, contour_analysis in enumerate(data['contour properties']):
            if any(qty is NaN for qty in contour_analysis):
                # There has been a problem in detecting the contour
                pass
            else:
                # if position correctly detected, update where to look next
                xc, yc, *_ = contour_analysis
                self.reference_positions[i] = (xc, yc)

    # ------------------- Subclassed methods from Analysis -------------------

    def _init_analysis(self):
        """Check everything OK before starting analysis & initialize params."""

        if self.contours.is_empty:
            msg = (
                "Contours not defined yet. Use self.contours.define(), or "
                "self.contours.load() if contours have been previously saved."
            )
            raise AttributeError(msg)

        self.reference_positions = list(self.contours.data['position'].values())

    def _analyze(self, img):
        """Find contours at level in file i closest to the reference positions.

        Parameters
        ----------
        img : array_like
            image array to be analyzed (e.g. numpy array).

        Returns
        -------
        list of tuples
            [(x1, y1, p1, a1), (y2, y2, p2, a1), ..., (xn, yn, pn, an)]
            where n is the number of contours followed and
            (x, y), p, a is position, perimeter, area
        """
        contours = self._find_contours(img, self.threshold.value)

        data = {'contour properties': []}     # Stores analysis data (centroid etc.)
        data['raw contours'] = []       # Stores full (x, y) contour data

        for refpos in self.reference_positions:

            try:
                # this time edge=false, because trying to find contour closest
                # to the recorded centroid position, not edges
                contour = imgbasics.closest_contour(
                    contours=contours,
                    position=refpos,
                    edge=True,
                )

            except imgbasics.ContourError:
                # No contour at all detected on image --> return NaN
                xc, yc, perimeter, area = (NaN,) * 4
                data['raw contours'].append(None)

            else:

                x, y = imgbasics.contour_coords(contour, source='scikit')

                contprops = imgbasics.contour_properties(x, y)

                xc, yc = contprops['centroid']
                perimeter = contprops['perimeter']
                area = contprops['area']
                data['raw contours'].append((x, y))

            data['contour properties'].append((xc, yc, perimeter, area))

        self._update_reference_positions(data)

        return data

    # ------------------ Redefinitions of Analysis methods -------------------

    def regenerate(self, filename=None):
        """Load saved data, metadata and regenerate objects from them.

        Is used to reset the system in a state similar to the end of the
        analysis that was made before saving the results.

        Parameters
        ----------
        filename : str
            name of the analysis results file (if None, use default)

        Notes
        -----
            More or less equivalent to:
            >>> analysis.results.load(filename=filename)
            >>> image_series.load_transforms()
            (except that transforms are loaded from the metadata file of the
            analysis, not from a file generated by
            image_series.save_transforms())
        """

        # Load data
        super().regenerate(filename=filename)

        # regenerate internal threshold / contours object
        self.contours.load(filename=filename)

        # at the moment, this is already done by contours.load(), but I'm
        # putting this there to be sure in case contours are modified to not
        # include threshold level information
        self.threshold.load(filename=filename)
