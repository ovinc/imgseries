"""Reflectance analysis: average grey level over time in img sequence."""

# Non-standard modules
import numpy as np
import pandas as pd

# Local imports
from .config import _crop
from .general import ImgSeries, Analysis
from .image_parameters import Zones


class GreyLevel(ImgSeries, Analysis):
    """Class to perform analysis of average grey level on image series."""

    name = 'Images Series (GreyLevel)'  # used for __repr__

    def __init__(self, paths='.', extension='.png', savepath='.', stack=None):
        """Analysis of avg gray level on selected zone in series of images.

        Parameters
        ----------
        - paths: str, path object, or iterable of str/paths if data is stored
          in multiple folders.

        - extension: extension of image files (e.g. '.png')

        - savepath: path in which to save analysis files.

        If file series is in a stack rather than in a series of images:
        - stack: path to the stack (.tiff) file
          (parameters paths & extension will be ignored)
        """
        ImgSeries.__init__(self,
                           paths=paths,
                           savepath=savepath,
                           extension=extension,
                           stack=stack)

        Analysis.__init__(self, measurement_type='glevel')

        # empty zones object, needs to be filled with zones.define() or
        # zones.load() prior to starting analysis with self.run()
        self.zones = Zones(self)

    # Basic analysis method --------------------------------------------------

    def analyze(self, num, live=False):
        """Basic analysis function, to be threaded or multiprocessed.

        Parameters
        ----------
        - num: file number identifier across the image file series
        - live: if True, analysis results are displayed in real time

        Output
        ------
        - data, handled by self.store_data()
        """
        glevels = []
        img = self.read(num)
        for cropzone in self.zones.data.values():
            img_crop = _crop(img, cropzone)
            glevel = np.mean(img_crop)
            glevels.append(glevel)
        return glevels

    def initialize(self):
        """Check everything OK before starting analysis & initialize params."""
        if self.zones.is_empty:
            msg = "Analysis zones not defined yet. Use self.zones.define(),  "\
                  "or self.zones.load() if zones have been previously saved."
            raise AttributeError(msg)

    def add_metadata(self):
        """Add useful analysis parameters etc. to the self.metadata dict.

        (later saved in the metadata json file)
        Define in subclasses
        """
        self.metadata['zones'] = self.zones.data

    def prepare_data_storage(self):
        """Prepare structure(s) that will hold the analyzed data."""
        self.glevel_data = []

    def store_data(self, data):
        """How to store data generated by analysis on a single image.

        Define in subclasses."""
        self.glevel_data.append(data)

    def generate_pandas_data(self):
        """How to convert data generated by store_data() into a pandas table."""
        zone_names = self.zones.data.keys()  # 'zone 1', 'zone 2', etc.
        data_table = pd.DataFrame(self.glevel_data,
                                  index=self.nums,
                                  columns=zone_names)
        data_table.index.name = 'num'
        return data_table
